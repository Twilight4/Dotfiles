#!/usr/bin/env zsh

# Create directory for saving results
create_scan_directory() {
    NAME=${1:-$(date +%Y%m%d-%T)}
    SCAN_DIRECTORY=$HOME/.scans/$NAME
    mkdir -p "$SCAN_DIRECTORY"
    echo "$SCAN_DIRECTORY"
}

# Create host list and scan IP with WORDLIST
enum_snmp() {
    STRINGS="/usr/share/seclists/Discovery/SNMP/snmp-onesixtyone.txt"
    WORDLIST=${2:-STRINGS}
    NETWORK=${3:-"10.11.1.0"}
    HOSTS=$(mktemp --suffix "-$0-hosts-$(date +%Y%m%d)")
    get_hosts "none" "$NETWORK" > "$HOSTS"
    onesixtyone -i "$HOSTS" -c "$STRINGS"
}

# Enumerate IP with whatweb and nikto
enum_web() {
    IP=${1:-$RHOST}
    PORT=${2:-80}
    # /usr/share/seclists/Discovery/Web_Content/Top1000-RobotsDisallowed.txt
    WORDLIST=${3:-"/usr/share/seclists/Discovery/Web-Content/common.txt"}
    SAVEPATH=$(create_scan_directory "$IP")
    GOBUSTER_OUTPUT="$SAVEPATH"/results_gobuster_$PORT
    NIKTO_OUTPUT="$SAVEPATH"/results_nikto_$PORT
    touch $GOBUSTER_OUTPUT
    touch $NIKTO_OUTPUT
    cd "$SAVEPATH" && whatweb -a 3 "$IP"
    gobuster dir -w "$WORDLIST" -u http://"$IP":"$PORT" -o "$SAVEPATH"/gobuster --output $GOBUSTER_OUTPUT
    nikto -host "$IP" -port "$PORT" -output $NIKTO_OUTPUT -Format txt
}

# You guessed it...this flushes iptables
flush_iptables() {
    echo ""
    echo ">>> Before flush <<<"
    echo "" 
    iptables -L
    iptables -F
    iptables -X
    iptables -t nat -F
    iptables -t nat -X
    iptables -t mangle -F
    iptables -t mangle -X
    iptables -t raw -F
    iptables -t raw -X
    iptables -P INPUT ACCEPT
    iptables -P FORWARD ACCEPT
    iptables -P OUTPUT ACCEPT
    echo ""
    echo ""
    echo ">>> After flush <<<"
    echo "" 
    iptables -L
    echo ""
}

# Set RHOST=IP and RPORT=PORT
focus() {
    IP=${1:-"EMPTY"}
    PORT=${2:-"EMPTY"}
    [[ "$IP" != "EMPTY" ]] && RHOST="$IP"
    [[ "$PORT" != "EMPTY" ]] && RPORT="$PORT"
    echo -e "\$RHOST: ${RHOST:-"NOT SET"}\n\$RPORT: ${RPORT:-"NOT SET"}\n"
}

# Get router IP address
get_gateway() {
   INTERFACE=${1:-tap0}
   ip route | grep via | grep "$INTERFACE" | cut -d" " -f3 
}

# Get list of host IP addresses found via nmap
get_hosts() {
    PORT=${1:-"none"}
    NETWORK=${2:-"10.11.1.0"}
    PATTERN="Nmap scan report for ${NETWORK:0:-1}"
    get_ip() {
        cut -d" " -f5 $1
    }
    if [[ $PORT == "none" ]]; then
        nmap "$NETWORK"/24 -sn | grep "$PATTERN" | get_ip
    else
        nmap "$NETWORK"/24 -p "$PORT" --open | grep "$PATTERN" | get_ip
    fi
}

# Get list of host names using nmap and the IP of a known DNS server
get_hostnames() {
    DNS=$1
    NETWORK=${2:-"10.11.1.0"}
    PATTERN="Nmap scan report for "
    get_ip() {
        cut -d" " -f5- $1
    }
    if [[ ${#1} -gt 0 ]]; then
        nmap "$NETWORK"/24 --dns-server "$DNS" -sn | grep "$PATTERN" | get_ip
    else
        echo "DNS server address required"
    fi
}

# Download IP and print with html2text
htm() { curl -s "${1:-$RHOST}:${80:-$RPORT}" | html2text -style pretty; }

# Monitor bytes over the line with iptables
monitor_traffic() {
    IP=${1:-$RHOST}
    iptables -I INPUT 1 -s "$IP" -j ACCEPT
    iptables -I OUTPUT 1 -d "$IP" -j ACCEPT
    iptables -Z 
}

# Scan IP with masscan
scan_tcp() {
    IP=${1:-$RHOST}
    INTERFACE=${2:-"tap0"}
    SAVEPATH=$(create_scan_directory "$IP")
    run() {
        masscan "$1" -e "$INTERFACE" --router-ip "$(get_gateway "$INTERFACE")" -p 0-65535 --rate 500 -oL "$SAVEPATH"/ports
    }
    run "$IP"
}

# Scan IP with nmap
scan_udp() {
    IP=${1:-$RHOST}
    SAVEPATH=$(create_scan_directory "$IP")
    run() {
        nmap -sU -T4 --open --max-retries 1 "$1" -oX "$SAVEPATH"/ports-udp.xml
    }
    run "$IP"
}

# Sort list of IP addresses
sort_ips() {
    IPS=$1
    sort -t . -k 3,3n -k 4,4n "$IPS"
}

# Metasploit Listener
listener() {
    clear
    f_banner
    
    echo -e "${BLUE}Metasploit Listeners${NC}"
    echo
    echo "1.   android/meterpreter/reverse_tcp"
    echo "2.   cmd/windows/reverse_powershell"
    echo "3.   java/jsp_shell_reverse_tcp"
    echo "4.   linux/x64/meterpreter_reverse_https"
    echo "5.   linux/x64/meterpreter_reverse_tcp"
    echo "6.   linux/x64/shell/reverse_tcp"
    echo "7.   osx/x64/meterpreter_reverse_https"
    echo "8.   osx/x64/meterpreter_reverse_tcp"
    echo "9.   php/meterpreter/reverse_tcp"
    echo "10.  python/meterpreter_reverse_https"
    echo "11.  python/meterpreter_reverse_tcp"
    echo "12.  windows/x64/meterpreter_reverse_https"
    echo "13.  windows/x64/meterpreter_reverse_tcp"
    echo "14.  Previous menu"
    echo
    echo -n "Choice: "
    read choice
    
    case $choice in
         1) payload="android/meterpreter/reverse_tcp";;
         2) payload="cmd/windows/reverse_powershell";;
         3) payload="java/jsp_shell_reverse_tcp";;
         4) payload="linux/x64/meterpreter_reverse_https";;
         5) payload="linux/x64/meterpreter_reverse_tcp";;
         6) payload="linux/x64/shell/reverse_tcp";;
         7) payload="osx/x64/meterpreter_reverse_https";;
         8) payload="osx/x64/meterpreter_reverse_tcp";;
         9) payload="php/meterpreter/reverse_tcp";;
         10) payload="python/meterpreter_reverse_https";;
         11) payload="python/meterpreter_reverse_tcp";;
         12) payload="windows/x64/meterpreter_reverse_https";;
         13) payload="windows/x64/meterpreter_reverse_tcp";;
         14) f_main;;
         *) f_error;;
    esac
    
    echo
    echo -n "LHOST: "
    read lhost
    
    # Check for no answer
    if [ -z $lhost ]; then
         lhost=$ip
         echo "[*] Using $ip"
         echo
    fi
    
    echo -n "LPORT: "
    read lport
    
    # Check for no answer
    if [ -z $lport ]; then
         lport=443
         echo "[*] Using 443"
    fi
    
    # Check for valid port number.
    if [[ $lport -lt 1 || $lport -gt 65535 ]]; then
         f_error
    fi
    
    # Check for root when binding to a low port
    if [[ $lport -lt 1025 && "$(id -u)" != "0" ]]; then
         echo "You must be root to bind to a port that low."
         sleep 3
         f_error
    fi
    
    cp $discover/resource/listener.rc /tmp/
    
    sed -i "s|aaa|$payload|g" /tmp/listener.rc
    sed -i "s/bbb/$lhost/g" /tmp/listener.rc
    sed -i "s/ccc/$lport/g" /tmp/listener.rc
    
    echo
    msfconsole -q -r /tmp/listener.rc
}
