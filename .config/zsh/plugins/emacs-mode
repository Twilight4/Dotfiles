#!/usr/bin/env zsh

# This file contains emacs-like keybindings and doesn't include the default keybindings that should be built-in zsh
# The default keybindings are in bindings.zsh file

# Emacs-like bindings
bindkey -e
bindkey ' ' magic-space                           # do history expansion on space

# Movement
bindkey '^B' backward-char
bindkey '^F' forward-char
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line
bindkey '^[b' backward-word
bindkey '^[f' forward-word
bindkey '^P' up-line-or-history
bindkey '^N' down-line-or-history
# Killing and yanking
bindkey '^U' backward-kill-line
bindkey '^O' kill-line
bindkey '^[d' kill-word
bindkey '^L' insert-last-word
bindkey '^W' backward-kill-word

# Full keyboard keys
bindkey '^?' backward-delete-char
bindkey '^H' backward-kill-word
bindkey '^[[1~' beginning-of-line
bindkey '^[[4~' end-of-line
bindkey '^[[1;5C' forward-word
bindkey '^[[1;5D' backward-word
bindkey '^[[A' up-line-or-history
bindkey '^[[B' down-line-or-history
#bindkey '^[[A' up-line-or-beginning-search
#bindkey '^[[B' down-line-or-beginning-search
bindkey '^[[5~' beginning-of-buffer-or-history
bindkey '^[[6~' end-of-buffer-or-history
bindkey '^[[3~' delete-char
bindkey '^[[Z' reverse-menu-complete

# Emacs has it's own clipboard buffer which to normally the text is copied, same with zsh
# By default keys M-w for copy and C-y for paste are set in emacs and zsh
# My custom functions make it easy to copy text to system clipboard using M-w and paste using C-y

# Open in external editor command
#bindkey '^[g' get-line            # M-g  # idk what's this for
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^X^E' edit-command-line

### FZF SCRIPTS ###
#bindkey -M emacs -r "^[u"
#zle -N "fwork\r"
bindkey -M emacs -s "^[u" "fwork\r"












# Function to paste from system clipboard so I don't have to bind it in kitty config and affect other terminal tools keybinds
function paste_from_clipboard() {
    wl-paste -n
}
zle -N paste_from_clipboard
#bindkey '^Y' paste_from_clipboard   # broken, using xterm-paste in kitty config

# Function to copy selected text to system clipboard
copy-region-and-kill() {
  zle copy-region-as-kill
  print -n $CUTBUFFER | wl-copy
}
zle -N copy-region-and-kill
bindkey '^[w' copy-region-and-kill

# Function to copy current line to system clipboard
copy-current-line() {
  print -n "$BUFFER" | wl-copy
}
zle -N copy-current-line
bindkey '^[W' copy-current-line     # Alt+Shift+w

# Function to delete char or cut to system clipboard if region is selected
delete-or-cut() {
  if [[ $REGION_ACTIVE -eq 1 ]]; then
    zle kill-region
    print -n $CUTBUFFER | wl-copy
  else
    zle delete-char
  fi
}
zle -N delete-or-cut
bindkey '^D' delete-or-cut

# Function to delete char backward or cut to system clipboard if region is selected
delete-or-cut-backward() {
  if [[ $REGION_ACTIVE -eq 1 ]]; then
    zle kill-region
    print -n $CUTBUFFER | wl-copy
  else
    zle backward-delete-char
  fi
}
zle -N delete-or-cut-backward
bindkey '^H' delete-or-cut-backward

# Function for new command
function _new_command {
    zle push-input
    BUFFER=""
}
zle -N _new_command
bindkey '^V' _new_command

# Function to open help page
custom-run-help() {
    LBUFFER="help $LBUFFER"
    zle accept-line
}
zle -N custom-run-help
bindkey '^[h' custom-run-help

# Function to clear the screen or cancel selection mode based on the context
cancel-or-clear() {
  if [[ $REGION_ACTIVE -eq 1 ]]; then
        zle set-mark-command -n -1
    else
        printf '\n%.0s' {1..$LINES}
        zle clear-screen
    fi
}

# Bind the custom widget to Ctrl+G
zle -N cancel-or-clear
bindkey '^G' cancel-or-clear

# Toggle selection mode
toggle-selection-mode() {
  if [[ $REGION_ACTIVE -eq 1 ]]; then
    zle set-mark-command -n -1
  else
    zle set-mark-command
  fi
}

# Bind Ctrl+Space to toggle-selection-mode
zle -N toggle-selection-mode
bindkey '^ ' toggle-selection-mode
