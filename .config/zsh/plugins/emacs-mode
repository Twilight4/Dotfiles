#!/usr/bin/env zsh

# This file contains emacs-like keybindings and doesn't include the default keybindings that should be built-in zsh
# Other default bindings are in bindings.zsh file

######################
# DEFAULT BINDINGS   #
######################
# Emacs-like bindings
bindkey -e
bindkey ' ' magic-space                           # do history expansion on space

# Movement
bindkey '^B' backward-char
bindkey '^F' forward-char
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line
bindkey '^[b' backward-word
bindkey '^[f' forward-word
bindkey '^P' up-line-or-history
bindkey '^N' down-line-or-history
# Killing and yanking
bindkey '^U' backward-kill-line
bindkey '^O' kill-line
bindkey '^[d' kill-word
bindkey '^L' insert-last-word
bindkey '^W' backward-kill-word

# Full keyboard keys
bindkey '^?' backward-delete-char
bindkey '^H' backward-kill-word
bindkey '^[[1~' beginning-of-line
bindkey '^[[4~' end-of-line
bindkey '^[[1;5C' forward-word
bindkey '^[[1;5D' backward-word
bindkey '^[[A' up-line-or-history
bindkey '^[[B' down-line-or-history
#bindkey '^[[A' up-line-or-beginning-search
#bindkey '^[[B' down-line-or-beginning-search
bindkey '^[[5~' beginning-of-buffer-or-history
bindkey '^[[6~' end-of-buffer-or-history
bindkey '^[[3~' delete-char
bindkey '^[[Z' reverse-menu-complete

# Open in external editor command
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^X^E' edit-command-line


######################
# ALT + ... KEYS     #
######################
### FZF SCRIPTS ###
# ctrl+key - mostly taken by zsh and the same are used by emacs
# alt+key - mostly taken by emacs
# ctrl+shift+key - some taken by kitty
# alt+shift+key - all available
# ctrl+alt+key - all avialable

# Check available keybinds: bindkey
# List whole commands for keybinds: bindkey -L
# List all the bindings in a given keymap: bindkey -M <keymap>
# List all registered zle commands: zle -al
#bindkey -M emacs -r "^[u"          # Remove a key
#zle -N "fwork\r"                   # Register zle command

# Command line
bindkey -M emacs -s '^[z' 'fpop\r'
bindkey -M emacs -s '^[x' 'fkill\r'
bindkey -M emacs -s '^[g' 'frm\r'
bindkey -M emacs -s '^[j' 'fmv\r'
#bindkey -M emacs -s '^[k' 'fman\r'
# Listing files
bindkey -M emacs -s '^[e' 'fnp\r'
bindkey -M emacs -s '^[u' 'fwork\r'
bindkey -M emacs -s '^[a' 'falias\r'
bindkey -M emacs -s '^[p' 'fproj\r'
#bindkey -M emacs -s '^[p' 'fdev\r'
bindkey -M emacs -s '^[t' 'ftemp\r'
#bindkey -M emacs -s '^[i' 'fpdf\r'
#bindkey -M emacs -s '^[v' 'ftrack\r'
#bindkey -M emacs -s '^[v' 'fimg\r'
#bindkey -M emacs -s '^[v' 'fcat\r'
bindkey -M emacs -s '^[y' 'fclip\r'
bindkey -M emacs -s '^[l' 'fqli\r'
# Cheatsheets/Notes
bindkey -M emacs -s '^[e' 'fchtc\r'
bindkey -M emacs -s '^[e' 'fchtce\r'
bindkey -M emacs -s '^[e' 'fchto\r'
bindkey -M emacs -s '^[e' 'fchtoe\r'
bindkey -M emacs -s '^[e' 'frgo\r'
bindkey -M emacs -s '^[e' 'frgoe\r'
# Cd/Search
bindkey -M emacs -s '^[,' 'ff\r'
bindkey -M emacs -s '^[.' 'ffh\r'
bindkey -M emacs -s '^[<' 'ffp\r'
#bindkey -M emacs -s '^[>' 'ffh\r'
#bindkey -M emacs -s '^[n'
# Git
bindkey -M emacs -s '^[]' 'fgcom\r'
bindkey -M emacs -s '^[[' 'fgs\r'
bindkey -M emacs -s '^['\' 'gcl\r'
### CTRL + ... KEYS ###
#map ctrl+' send_text normal
#map ctrl+. send_text normal
#map ctrl+, send_text normal
#map ctrl+[ send_text normal
#map ctrl+] send_text normal

# fapti
#bindkey -M emacs -s '^;' 'fapti\r'
#map ctrl+; launch sh -c "apt-cache search . | cut -d' ' -f1 | fzf --multi --reverse --preview 'apt-cache show {1}' | xargs -r sudo apt-get install"
# faptr
#bindkey -M emacs -s '^[;' 'faptr\r'
#map alt+; launch sh -c "dpkg --get-selections | awk '$2 == \"install\" { print $1 }' | fzf --multi --reverse --preview 'apt-cache show {1}' | xargs -ro sudo apt-get purge"
















# Emacs has it's own clipboard buffer which to normally the text is copied, same with zsh
# By default keys M-w for copy and C-y for paste are set in emacs and zsh
# My custom functions make it easy to copy text to system clipboard using M-w and paste using C-y
# Function to paste from system clipboard so I don't have to bind it in kitty config and affect other terminal tools keybinds
function paste_from_clipboard() {
    wl-paste -n
}
zle -N paste_from_clipboard
#bindkey '^Y' paste_from_clipboard   # broken, using xterm-paste in kitty config

# Function to copy selected text to system clipboard
copy-region-and-kill() {
  zle copy-region-as-kill
  print -n $CUTBUFFER | wl-copy
}
zle -N copy-region-and-kill
bindkey '^[w' copy-region-and-kill

# Function to copy current line to system clipboard
copy-current-line() {
  print -n "$BUFFER" | wl-copy
}
zle -N copy-current-line
bindkey '^[W' copy-current-line     # Alt+Shift+w

# Function to delete char or cut to system clipboard if region is selected
delete-or-cut() {
  if [[ $REGION_ACTIVE -eq 1 ]]; then
    zle kill-region
    print -n $CUTBUFFER | wl-copy
  else
    zle delete-char
  fi
}
zle -N delete-or-cut
bindkey '^D' delete-or-cut

# Function to delete char backward or cut to system clipboard if region is selected
delete-or-cut-backward() {
  if [[ $REGION_ACTIVE -eq 1 ]]; then
    zle kill-region
    print -n $CUTBUFFER | wl-copy
  else
    zle backward-delete-char
  fi
}
zle -N delete-or-cut-backward
bindkey '^H' delete-or-cut-backward

# Function for new command
function _new_command {
    zle push-input
    BUFFER=""
}
zle -N _new_command
bindkey '^V' _new_command

# Function to open help page
custom-run-help() {
    LBUFFER="help $LBUFFER"
    zle accept-line
}
zle -N custom-run-help
bindkey '^[h' custom-run-help

# Function to clear the screen or cancel selection mode based on the context
cancel-or-clear() {
  if [[ $REGION_ACTIVE -eq 1 ]]; then
        zle set-mark-command -n -1
    else
        printf '\n%.0s' {1..$LINES}
        zle clear-screen
    fi
}

# Bind the custom widget to Ctrl+G
zle -N cancel-or-clear
bindkey '^G' cancel-or-clear

# Toggle selection mode
toggle-selection-mode() {
  if [[ $REGION_ACTIVE -eq 1 ]]; then
    zle set-mark-command -n -1
  else
    zle set-mark-command
  fi
}

# Bind Ctrl+Space to toggle-selection-mode
zle -N toggle-selection-mode
bindkey '^ ' toggle-selection-mode
