
#+TITLE: GNU Emacs Config
#+AUTHOR: Twilight4
#+DESCRIPTION: Personal Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#programs-to-load-first][Programs to load first]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#evil-mode][Evil Mode]]
  - [[#global-keybindings][Global Keybindings]]
  - [[#general-keybindings][General Keybindings]]
- [[#ui-configuration][UI Configuration]]
  - [[#better-defaults][Better Defaults]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#all-the-icons][All-the-icons]]
  - [[#color-theme][Color Theme]]
  - [[#modeline][Modeline]]
  - [[#window-title][Window Title]]
  - [[#file-names-for-org-roam][File names for Org-roam]]
  - [[#which-key][Which-key]]
  - [[#dashboard][Dashboard]]
  - [[#transparency][Transparency]]
  - [[#centaur-tabs][Centaur-tabs]]
  - [[#file-encoding][File Encoding]]
- [[#editing-features][Editing Features]]
  - [[#hungry-delete][Hungry-delete]]
  - [[#no-littering][No-littering]]
  - [[#rainbow-mode][Rainbow-mode]]
  - [[#rainbow-delimeters][Rainbow-delimeters]]
  - [[#electric-pair-mode][Electric-pair-mode]]
  - [[#buffer-move][Buffer-move]]
  - [[#maximize-evil-split][Maximize-evil-split]]
  - [[#splits][Splits]]
- [[#other-packages][Other Packages]]
  - [[#neotree][Neotree]]
  - [[#dired][Dired]]
  - [[#vertico][Vertico]]
  - [[#marginalia][Marginalia]]
  - [[#magit][Magit]]
  - [[#git-timemachine][Git-Timemachine]]
  - [[#elfeed][Elfeed]]
- [[#plaintext][Plaintext]]
  - [[#ansi-colours][Ansi colours]]
  - [[#margin-without-line-numbers][Margin without line numbers]]
- [[#org-mode][Org Mode]]
  - [[#essential-packages][Essential Packages]]
  - [[#editing-features-for-org][Editing Features for Org]]
  - [[#org-configuraion][Org Configuraion]]

* Programs to load first
** Elpaca Package Manager

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.5)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)
#+end_src

** Evil Mode

#+begin_src emacs-lisp
;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
    :init      ;; Tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-ex-substitute-global t)
    (setq evil-move-cursor-back nil)
    (setq evil-kill-on-visual-paste nil)
    (setq evil-want-C-i-jump nil)
    (evil-mode))

(use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))

(use-package evil-tutor)

;; Using RETURN to follow links in Org/Evil 
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link  t)
#+end_src

** Global Keybindings
*** Disable Conflicting Keybindings
#+begin_src emacs-lisp
;; This code sets up an empty keymap for C-x prefix effectively removing all default keybindings under the C-x prefix
;; If you still want to use some of the keybindings prefixed by C-x, you will need to manually rebind them using the 'general' package
(define-key global-map (kbd "C-x") (make-sparse-keymap))

;; Unbinding Global Keybindings
(define-key global-map (kbd "M-d") nil)
(define-key global-map (kbd "M-f") nil)
(define-key global-map (kbd "M-b") nil)
(define-key global-map (kbd "M-,") nil)
(define-key global-map (kbd "M-C-n") nil)
(define-key global-map (kbd "M-C-b") nil)
(define-key global-map (kbd "M-C-f") nil)

;; Unbinding Org Mode Keybindings
;; Unbinding the default annoying conflicting keybinds (depending on a mode)
;; It works because first it unbinds the keybind and when I have this keybind set later
;; in the config then it binds it to that keybind
(define-key org-mode-map (kbd "C-j") nil)
(define-key org-mode-map (kbd "M-h") nil)
(define-key org-mode-map (kbd "M-t") nil)

;; Unbinding Calendar Mode Keybindings - does not work
;(with-eval-after-load 'calendar
;  (define-key calendar-mode-map (kbd "M-h") nil)
;  (define-key calendar-mode-map (kbd "M-j") nil)
;  (define-key calendar-mode-map (kbd "M-k") nil)
;  (define-key calendar-mode-map (kbd "M-l") nil)
;)

;; Unbinding Evil Mode Keybindings
(with-eval-after-load 'evil
  ;; Unbinding the default C-w prefix key
  (define-key evil-normal-state-map (kbd "C-w") nil)
  (define-key evil-motion-state-map (kbd "C-w") nil)
  ;; Unbinding the default bindings in normal mode
  (define-key evil-normal-state-map "H" nil)
  (define-key evil-normal-state-map "J" nil)
  (define-key evil-normal-state-map "K" nil)
  (define-key evil-normal-state-map "L" nil)
  (define-key evil-normal-state-map "M" nil)
  ;; Unbinding the default bindings
  (define-key evil-normal-state-map (kbd "M-.") nil)
  (define-key evil-motion-state-map (kbd "M-.") nil)
)
#+end_src

*** Keybindings Without a Leader Key
#+begin_src emacs-lisp
;; NOTE: the difference with define-key adn global-set-key is that define-key is specific
;; for a mode and it's always better to use it for a specific mode to avoid mess

;; Evil Mode Keybindings
(with-eval-after-load 'evil
  ;; Map "C-u" to "Page Up" in Evil normal and visual state
  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
  (evil-define-key 'visual evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
  ;; Keybindings for moving between windows
  (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
  (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
  (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
  (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
  ;; Keybindings for moving the windows
  (define-key evil-normal-state-map (kbd "C-S-H") 'buf-move-left)
  (define-key evil-normal-state-map (kbd "C-S-J") 'buf-move-down)
  (define-key evil-normal-state-map (kbd "C-S-K") 'buf-move-up)
  (define-key evil-normal-state-map (kbd "C-S-L") 'buf-move-right)
  ;; Keybindings for increasing and decreasing window width and height
  (define-key evil-normal-state-map (kbd "M-<") 'evil-window-increase-width)
  (define-key evil-normal-state-map (kbd "M->") 'evil-window-decrease-width)
  (define-key evil-normal-state-map (kbd "M-=") 'evil-window-increase-height)
  (define-key evil-normal-state-map (kbd "M--") 'evil-window-decrease-height)
  (define-key evil-normal-state-map (kbd "M-0") 'balance-windows)
  ;; Window splits
  (define-key evil-normal-state-map (kbd "M-c") 'evil-window-delete)
  (define-key evil-normal-state-map (kbd "M-v") 'evil-window-split)
  (define-key evil-normal-state-map (kbd "M-s") 'evil-window-vsplit)
  ;; Maximize window
  (define-key evil-normal-state-map (kbd "M-m") 'toggle-maximize-evil-split)
  ;; Keybindings for org mode in evil normal mode for S-motion keys
  (define-key evil-normal-state-map "H" 'org-shiftleft)
  (define-key evil-normal-state-map "J" 'org-shiftdown)
  (define-key evil-normal-state-map "K" 'org-shiftup)
  (define-key evil-normal-state-map "L" 'org-shiftright)
  ;; Rebinding default keybind of "J" for evil normal mode
  (define-key evil-normal-state-map "M" 'evil-join)
  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
)

;; Global Keybindings
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
;; Zoom In/Out
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-0") 'text-scale-adjust)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
;; Hungry-delete
(global-set-key (kbd "<backspace>") 'hungry-delete-backward)
(global-set-key (kbd "<delete>") 'hungry-delete-forward)
;; Centaur tabs - trying to figure out the way to skip default buffers to avoid mess
;(global-set-key (kbd "M-p") 'centaur-tabs-backward)
;(global-set-key (kbd "M-n") 'centaur-tabs-forward)
(global-set-key (kbd "M-p") 'switch-to-prev-buffer)
(global-set-key (kbd "M-n") 'switch-to-next-buffer)


(global-set-key (kbd "M-f") 'centaur-tabs-forward-group)
(global-set-key (kbd "M-b") 'centaur-tabs-backward-group)
(global-set-key (kbd "M-,") 'centaur-tabs-move-current-tab-to-left)
(global-set-key (kbd "M-.") 'centaur-tabs-move-current-tab-to-right)
(global-set-key (kbd "M-d") 'kill-this-buffer)
(global-set-key (kbd "M-D") 'centaur-tabs-kill-other-buffers-in-current-group)
(global-set-key (kbd "M-t") 'dashboard-open)
;(global-set-key (kbd "M-1") 'centaur-tabs-select-visible-tab)
;(global-set-key (kbd "M-2") 'centaur-tabs-select-visible-tab)
;(global-set-key (kbd "M-3") 'centaur-tabs-select-visible-tab)
;(global-set-key (kbd "M-4") 'centaur-tabs-select-visible-tab)
;; Org tansclusion package
(define-key global-map (kbd "<f12>") #'org-transclusion-add)
;; Zero-width space (this is an exception keybinding)
(global-set-key (kbd "C-c C-SPC")
                (lambda () (interactive) (insert "\u200B")))

;; Org Mode Keybindings
;; Org heading navigation
(define-key org-mode-map (kbd "M-h") #'org-up-element)                   ; default g h
(define-key org-mode-map (kbd "M-j") #'org-forward-heading-same-level)   ; default g j
(define-key org-mode-map (kbd "M-k") #'org-backward-heading-same-level)  ; default g k
(define-key org-mode-map (kbd "M-l") #'org-down-element)                 ; default g l
;; Org promote/demote headings
(define-key org-mode-map (kbd "M-H") #'org-metaleft)                     ; default M-<left>
(define-key org-mode-map (kbd "M-J") #'org-metadown)                     ; default M-<down>
(define-key org-mode-map (kbd "M-K") #'org-metaup)                       ; default M-<up>
(define-key org-mode-map (kbd "M-L") #'org-metaright)                    ; default M-<right>
;; Org-roam
(define-key org-mode-map (kbd "C-M-n") 'completion-at-point)
(define-key org-mode-map (kbd "C-M-f") 'org-roam-dailies-goto-next-note)
(define-key org-mode-map (kbd "C-M-b") 'org-roam-dailies-goto-previous-note)
;; Org-agenda
(add-hook 'org-agenda-mode-hook
          (lambda ()
             ;; Set the default keys for tasks in org-agenda-mode
            (local-set-key (kbd "d") 'tl/org-agenda-doing)
            (local-set-key (kbd "x") 'tl/org-agenda-done)
            (local-set-key (kbd "X") 'tl/org-agenda-mark-done-and-add-followup)
            (local-set-key (kbd "N") 'tl/org-agenda-new)))

;; Calendar Mode Keybindings - does not work
;(with-eval-after-load 'calendar
;  (define-key calendar-mode-map (kbd "M-h") #'org-shiftleft)             ; default S-<left>
;  (define-key calendar-mode-map (kbd "M-j") #'org-shiftdown)             ; default S-<down>
;  (define-key calendar-mode-map (kbd "M-k") #'org-shiftup)               ; default S-<up>
;  (define-key calendar-mode-map (kbd "M-l") #'org-shiftright)            ; default S-<right>
;)
#+end_src

** General Keybindings
*** General package
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)
#+end_src

*** C-x Leader Key
#+begin_src emacs-lisp
;; Set up 'C-x' as the global leader key
(general-define-key
 :prefix "C-x"
 :states '(normal insert visual emacs)
 "" nil ; Remove default C-x keymap prefix
 ;; Common keybindings
 "C-n" '(neotree-toggle :wk "Toggle neotree")
 "C-d" '(delete-file :wk "Delete file")
 ;; Buffers
 "b" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
 "C-b" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
 "i" '(ibuffer :wk "Ibuffer")
 "C-k" '(kill-some-buffers :wk "Kill multiple buffers")
 "r" '(revert-buffer :wk "Reload buffer")
 "C-r" '(rename-buffer :wk "Rename buffer")
 "C-s" '(save-some-buffers :wk "Save multiple buffers")
 ;; Bookmarks
 "C-l" '(list-bookmarks :wk "List bookmarks")
 "C-m" '(bookmark-set :wk "Set bookmark")
 "C-d" '(bookmark-delete :wk "Delete bookmark")
 "C-f" '(bookmark-save :wk "Save current bookmarks to bookmark file"))
 ;; Git - TODO keybinds
 ;"C-g" '(magit-displatch :wk "Magit dispatch")
 ;"g" '(magit-file-displatch :wk "Magit file dispatch")
 ;"g" '(git-timemachine :wk "Git time machine")
 ;"C-/" '(magit-branch-checkout :wk "Switch branch")

(setq bookmark-default-file "~/.config/emacs/bookmarks")
#+end_src

*** C-c Leader Key
#+begin_src emacs-lisp
;; Set up 'C-c' as the global leader key
(general-define-key
 :prefix "C-c"
 :states '(normal insert visual emacs)
 "" nil ; Remove default C-c keymap prefix
 ;; Org mode
 "C-." '(org-time-stamp :wk "Org timestamp")
 "C-/" '(org-tag :wk "Org tag")
 "C-p" '(org-set-property :wk "Org property")
 "C-e" '(org-set-effort :wk "Org effort")
 "C-h" '(org-toggle-heading :wk "Org toggle heading")
 "C-i" '(org-toggle-item :wk "Org toggle item")
 "C-f" '(org-insert-file-link :wk "Org insert file link")
 "C-m" '(org-toggle-checkbox :wk "Org toggle checkbox")
 "C--" '(org-table-insert-hline :wk "Insert hline in table")
 "n" '(create-new-org-buffer :wk "Create new org buffer")
 ;; Org Roam
 "r" '(org-roam-buffer-toggle :wk "Toggle Org roam buffer")
 "f" '(org-roam-node-find :wk "Find Org roam node")
 "l" '(org-roam-node-insert :wk "Insert Org roam node")
 "i" '(org-id-get-create :wk "Insert id for Org heading")
 "g" '(org-roam-graph :wk "Show Org roam graph")
 "c" '(org-roam-capture :wk "Capture to node")
 ;; Org Roam dailies
 "n" '(org-roam-dailies-capture-today :wk "Capture daily today")
 "N" '(org-roam-dailies-goto-today :wk "Go to daily today")
 "y" '(org-roam-dailies-capture-yesterday :wk "Capture daily yesterday")
 "Y" '(org-roam-dailies-goto-yesterday :wk "Go to daily yesterday")
 "t" '(org-roam-dailies-capture-tomorrow :wk "Capture to daily tomorrow")
 "T" '(org-roam-dailies-goto-tomorrow :wk "Go to daily tomorrow")
 "d" '(org-roam-dailies-capture-date :wk "Capture daily in date")
 "D" '(org-roam-dailies-goto-date :wk "Go to daily in date")
)
#+end_src

*** SPC Leader Key
#+begin_src emacs-lisp
;; Set up 'SPC' as another global leader key
(general-create-definer tl/leader-keys
  :states '(normal insert visual emacs)
  :keymaps 'override
  :prefix "SPC" ;; Set leader
  :global-prefix "M-SPC") ;; Access leader in insert mode

  (tl/leader-keys
    "," '(recentf :wk "Find recent files")
    "." '(find-file :wk "Find file")
    "TAB" '(comment-line :wk "Comment lines")
    "a" '(org-agenda :wk "Org agenda")
    "f" '(elfeed :wk "Elfeed")
    "T" '(org-todo-list :wk "Org todo list")
    "c" '(org-capture :wk "Capture to inbox")
    "b" '(switch-to-buffer :wk "Switch to buffer")
    "s" '(basic-save-buffer :wk "Save buffer"))

  (which-key-add-key-based-replacements "SPC ." "Find file")

  (tl/leader-keys
    "h" '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h k" '(describe-key-briefly :wk "Describe key briefly")
    "h K" '(describe-key :wk "Describe key")
    "h r" '((lambda () (interactive)
                (load-file "~/.config/emacs/init.el")
                (ignore (elpaca-process-queues)))
              :wk "Reload emacs"))

  (tl/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t h" '(hl-line-mode :wk "Toggle line highlight in frame")
    "t H" '(global-hl-line-mode :wk "Toggle line highlight globally")
    "t T" '(org-transclusion-mode :wk "Org Transclusion mode"))

  (tl/leader-keys
    "o" '(:ignore t :wk "Org")
    "o e" '(org-export-dispatch :wk "Org export dispatch")
    "o T" '(org-babel-tangle :wk "Org babel tangle"))

  (tl/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d ." '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired"))

  (tl/leader-keys
    "r" '(:ignore t :wk "Registers")
    "r c" '(copy-to-register :wk "Copy to register")
    "r f" '(frameset-to-register :wk "Frameset to register")
    "r i" '(insert-register :wk "Insert contents of register")
    "r j" '(jump-to-register :wk "Jump to register")
    "r l" '(list-registers :wk "List registers")
    "r n" '(number-to-register :wk "Number to register")
    "r r" '(register :wk "Interactively choose a register")
    "r v" '(view-register :wk "View a register")
    "r w" '(window-configuration-to-register :wk "Window configuration to register")
    "r +" '(increment-register :wk "Increment register")
    "r SPC" '(point-to-register :wk "Point to register"))

  (tl/leader-keys
    "g" '(:ignore t :wk "Git")    
    "g /" '(magit-displatch :wk "Magit dispatch")
    "g ." '(magit-file-displatch :wk "Magit file dispatch")
    "g b" '(magit-branch-checkout :wk "Switch branch")
    "g c" '(:ignore t :wk "Create") 
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
    "g C" '(magit-clone :wk "Clone repo")
    "g f" '(:ignore t :wk "Find") 
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g r" '(vc-revert :wk "Git revert file")
    "g s" '(magit-stage-file :wk "Git stage file")
    "g t" '(git-timemachine :wk "Git time machine")
    "g u" '(magit-stage-file :wk "Git unstage file"))

  (tl/leader-keys
    "e" '(:ignore t :wk "Edit File")
    "e n" '(lambda () (interactive) (find-file "~/documents/org/roam/permanent-notes"))
    "e c" '(lambda () (interactive) (find-file "~/.config/emacs/config.org"))
    "e s" '(lambda () (interactive) (find-file "~/workspace/dotfiles/.config/emacs/emacs-cheatsheet.org")))

  (which-key-add-key-based-replacements "SPC e n" "Edit permanent notes"
                                        "SPC e c" "Edit config"
                                        "SPC e s" "Edit emacs cheatsheet")
)
#+end_src

* UI Configuration
** Better Defaults

#+begin_src emacs-lisp
(delete-selection-mode 1)                         ; You can select text in insert mode (mouse) and delete it by typing
(electric-indent-mode -1)                         ; Electric indent mode makes Org mode source blocks have some really weird and annoying default indentation behavior
(electric-pair-mode 1)                            ; Turns on automatic parens pairing
(menu-bar-mode -1)                                ; Disable menu bar
(tool-bar-mode -1)                                ; Disable tool bar
(scroll-bar-mode -1)                              ; Disable scroll bar
(tooltip-mode -1)                                 ; Disable tooltips
;(global-display-line-numbers-mode 1)              ; Display line numbers (I prefer to set this setting individually for modes)
(global-visual-line-mode t)                       ; Display truncated lines
(global-auto-revert-mode t)                       ; Automatically show changes if the file has changed
(fringe-mode -1)                                  ; Disable the narrow areas on the sides of the emacs window

(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; Take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
 evil-want-fine-undo t                            ; By default while in insert all changes are one big blob. Be more granular
 auto-save-default nil                            ; I like to lose work, I certainly do
 truncate-string-elipsis "…"                      ; Unicode ellispis are nicer than "...", and also save /precious/ space
 scroll-margin 2                                  ; It's nice to maintain a little margin
 display-time-default-load-average nil            ; I don't think I've ever found this useful
 use-dialog-box nil                               ; This setting disables the display of dialog boxes, such as confirmation or warning pop-ups
 use-file-dialog nil                              ; This setting disables the use of file selection dialogs, instead emacs will rely on command-line or programmatic methods for file operations
 display-line-numbers-type 'relative              ; Relative line numbers are fantastic for knowing how far away line numbers are, then 12 <UP> gets you exactly where you think
 blink-cursor-mode nil                            ; I hate blinking cursors
 inhibit-startup-message t)                       ; Prevent the default initial splash screen from being displayed when you start Emacs

;; Don't create automatic backup files in their original directories (e.g. file.el~). Put all backups in the Trash directory
(setq backup-directory-alist '((".*" . "~/.config/.local/share/Trash/files")))

;; Enable line numbers in Org Mode buffers
(add-hook 'org-mode-hook 'display-line-numbers-mode)

(display-time-mode 1)                             ; Enable time in the mode-line
(global-subword-mode 1)                           ; Iterate through CamelCase words
(defalias 'yes-or-no-p 'y-or-n-p)                 ; Use 'y' or 'n' instead of 'yes' or 'no'

(unless (string-match-p "^Power N/A" (battery))   ; On laptops...
  (display-battery-mode 1))                       ; it's nice to know how much power you have

;; Set src block automatic indent to 0 instead of 2
(setq org-edit-src-content-indentation 0)

;; Keep buffers synced and up to date with auto revert mode
(setq global-auto-revert-non-file-buffers t)
#+end_src

** Setting the Font Face

#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "JetBrains Mono Nerd Font"
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu Nerd Font"
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono Nerd Font"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono Nerd Font-12"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src

** All-the-icons
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs. 
*NOTE*: The first time you load your configuration on a new machine, you'll need to run =M-x all-the-icons-install-fonts= so that mode line icons display correctly.

#+begin_src emacs-lisp
(use-package all-the-icons)
  :ensure t
  :if (display-graphic-p)

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Color Theme
Taking a look at the [[https://github.com/doomemacs/themes/tree/screenshots][screenshots]] might help you decide which one you like best. You can run =M-x load-theme= to choose between them easily.

#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-city-lights t))
  :config
  (setq doom-themes-enable-bold t      ; if nil, bold is universally disabled
        doom-themes-enable-italic t)   ; if nil, italics is universally disabled
#+end_src

** Modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 15      ;; Sets modeline height
        doom-modeline-bar-width 5    ;; Sets right bar width
        doom-modeline-persp-name t   ;; Adds perspective name to modeline
        doom-modeline-persp-icon t)) ;; Adds folder icon next to persp name

;; Changing font size for doom modeline (default 1.0)
;(custom-set-faces
;  '(mode-line ((t (:family "JetBrains Mono Nerd Font" :height 0.95))))
;  '(mode-line-active ((t (:family "JetBrains Mono Nerd Font" :height 0.95))))
;  '(mode-line-inactive ((t (:family "JetBrains Mono Nerd Font" :height 0.95)))))
#+end_src

** Window Title
I’d like to have just the buffer name, then if applicable the project folder.
Change the icon in the modeline if the buffer is changed/unsaved.

#+begin_src emacs-lisp
(setq frame-title-format
      '(""
        (:eval
         (if (string-match-p (regexp-quote (or (bound-and-true-p org-roam-directory) "\u0000"))
                             (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ?\s buffer-file-name))
           "%b"))
        (:eval
         (when-let ((project-name (and (featurep 'projectile) (projectile-project-name))))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ◉ %s" "  ●  %s") project-name))))))
#+end_src

** File names for Org-roam
Adjust org-roam file names in similary way I have in the window title.

#+begin_src emacs-lisp
(defadvice doom-modeline-buffer-file-name (around doom-modeline--buffer-file-name-roam-aware-a activate)
  (if (string-match-p (concat "^" (regexp-quote org-roam-directory))
                      (or buffer-file-name ""))
      (setq ad-return-value
            (replace-regexp-in-string
             "\\(?:^\\|.*/\\)\\([0-9]\\{4\\}\\)\\([0-9]\\{2\\}\\)\\([0-9]\\{2\\}\\)[0-9]*-"
             "🢔(\\1-\\2-\\3) "
             (subst-char-in-string ?_ ?  buffer-file-name)))
    ad-do-it))
#+end_src


** Which-key

#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.5
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
#+end_src

** Dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  (setq dashboard-startup-banner "~/.config/emacs/assets/dash.png")  ;; use custom image as banner
  (setq dashboard-center-content t) ;; center the content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (registers . 3)))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** Transparency
It's always better to set transparency in optiosn for respective applications that supports it rather than setting it in window manager. I use transparency in Hyprland but not in River.

#+begin_src emacs-lisp
;(add-to-list 'default-frame-alist '(alpha-background . 90)) ; For all new frames henceforth
#+end_src

** Centaur-tabs
Centaur Tabs is an Emacs package that enhances the tab bar functionality, providing a more visually appealing way to manage multiple open buffers. Source: [[https://github.com/ema2159/centaur-tabs][centaur-tabs]]

#+begin_src emacs-lisp
(use-package centaur-tabs
  :if window-system
  :demand
  :init
  ;; Set the style to rounded with icons
  (setq centaur-tabs-style "bar"
        centaur-tabs-set-icons t
        centaur-tabs-height 26
        centaur-tabs-modified-marker "o"
        centaur-tabs-close-button ""
        centaur-tabs-set-bar 'above
        centaur-tabs-gray-out-icons 'buffer)

  :config
  ;; Enable centaur-tabs
  (centaur-tabs-mode t))
#+end_src

** File Encoding
When we have the default file encoding (LF UTF-8), it really isn’t worth noting in the modeline.

#+begin_src emacs-lisp
;; Setting up default encoding
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

(defun doom-modeline-conditional-buffer-encoding ()
  "Hide modeline encoding indicator for LF UTF-8."
  (setq-local doom-modeline-buffer-encoding
              (and (memq (coding-system-category buffer-file-coding-system) '(undecided utf-8))
                   (memq (coding-system-eol-type buffer-file-coding-system) '(0)))
              ))

(add-hook 'after-change-major-mode-hook 'doom-modeline-conditional-buffer-encoding)
#+end_src

* Editing Features
** Hungry-delete
Hungry Delete is a minor-mode that causes deletion to delete all whitespace in the direction you are deleting. Source: [[https://github.com/nflath/hungry-delete][hungry-delete]]

#+begin_src emacs-lisp
(use-package hungry-delete
  :ensure t
  :defer t
  :config (global-hungry-delete-mode))
#+end_src

** No-littering
I use the =no-littering= package to keep folders where I edit files and the Emacs configuration folder clean.

#+begin_src emacs-lisp
;; NOTE: If you want to move everything out of the ~/.emacs.d folder
;; reliably, set `user-emacs-directory` before loading no-littering!
;(setq user-emacs-directory "~/.cache/emacs")

(use-package no-littering
  :ensure t)
#+end_src

** Rainbow-mode
Display the actual color as a background for any hex color value (ex. #ffffff). The code block below enables =rainbow-mode= in all programming modes (=prog-mode=) as well as =org-mode=, which is why rainbow works in this document.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)
#+end_src

** Rainbow-delimeters
Adding rainbow coloring to parentheses.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (clojure-mode . rainbow-delimiters-mode)))
#+end_src

** Electric-pair-mode

#+begin_src emacs-lisp
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src

** Buffer-move
Creating some functions to allow easily moving windows around. Source: [[https://www.emacswiki.org/emacs/buffer-move.el][EmacsWiki]]

#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

** Maximize-evil-split

#+begin_src emacs-lisp
;; Define a variable to keep track of maximized window state
(defvar maximized-evil-split nil)

;; Define a function to toggle the maximization of an Evil split window
(defun toggle-maximize-evil-split ()
  "Toggle the maximization of an Evil split window."
  (interactive)
  (if maximized-evil-split
      (progn
        (balance-windows)
        (setq maximized-evil-split nil))
    (if (= (count-windows) 2)
        (delete-other-windows)
      (if (> (window-width) (* 2 (window-height)))
          (progn
            (setq maximized-evil-split t)
            (delete-other-windows)
            (evil-window-vsplit))
        (progn
          (setq maximized-evil-split t)
          (delete-other-windows)
          (evil-window-split))))))
#+end_src

** Splits
I set a keybinding for =clone-indirect-buffer-other-window= for when I want to have the same document in two splits. The text of the indirect buffer is always identical to the text of its base buffer.

#+begin_src emacs-lisp
(defun prefer-vertical-split ()
  (setq split-width-threshold nil)
  (setq split-height-threshold 40)) ; Adjust this value as needed
#+end_src

* Other Packages
** Neotree
A Emacs tree plugin like NerdTree for Vim.

#+begin_src emacs-lisp
(use-package neotree
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 25
        neo-theme (if (display-graphic-p) 'icons 'arrow)
        neo-window-fixed-size nil
        inhibit-compacting-font-caches t)
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil)))))

;; Disable line numbers in NeoTree buffers
(add-hook 'neo-after-create-hook
          (lambda (_)
            (setq-local display-line-numbers-mode nil)))
#+end_src

** Dired
Dired (short for "directory editor") is a built-in file management mode in Emacs.

#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "nsxiv")
                                ("jpg" . "nsxiv")
                                ("png" . "nsxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (peep-dired-mode . evil-normalize-keymaps) ; Bind keys after entering peep-dired mode
  :config
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

;; Add additional bindings to dired-mode-map if needed
(defun dired-setup ()
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file))

(add-hook 'dired-mode-hook 'dired-setup)
#+end_src

** Vertico
Vertico provides minibuffer completions which doesn’t include any of the other cruft that comes along with the more heavy-weight third party options. One important feature is that it plugs in directly to Emacs’ own completion engine unlike Helm and Ivy which have their own layer on top. This enables all existing completion commands in Emacs to use Vertico’s UI with no extra configuration.

The following configuration will add a few improvements: 
- Additional key bindings for users that like Vim-style movement keys
- Saving completion history, Vertico will sort items based on history!
- Adding extra metadata for completions in the margins using Marginalia
  
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :bind (:map vertico-map
         ("C-j" . vertico-next)
         ("C-k" . vertico-previous)
         ("C-f" . vertico-exit)
         :map minibuffer-local-map
         ("M-h" . backward-kill-word))
  :init
  (vertico-mode)
  (savehist-mode))
#+end_src

** Marginalia
Marginalia is nice, but the file metadata annotations are a little too plain. Specifically, I have these gripes
- File attributes would be nicer if coloured
- I don’t care about the user/group information if the user/group is me
- When a file time is recent, a relative age (e.g. 2h ago) is more useful than the date
- An indication of file fatness would be nice

Thanks to the =marginalia-annotator-registry=, we don’t have to advise, we can just add a new =file= annotator.
Another small thing is the face used for docstrings. At the moment it’s (italic shadow), but I don’t like that. 

#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode)

  (setq marginalia-censor-variables nil)

  (defun +marginalia--annotate-local-file-colorful (cand)
    "Just a more colourful version of `marginalia--annotate-local-file'."
    (when-let* ((attrs (file-attributes (substitute-in-file-name
                                        (marginalia--full-candidate cand)))))
      (marginalia--fields
       ((marginalia--file-owner attrs)
        :width 12 :face 'marginalia-file-owner)
       ((marginalia--file-modes attrs))
       ((+marginalia-file-size-colorful (file-attribute-size attrs))
        :width 7)
       ((+marginalia--time-colorful (file-attribute-modification-time attrs))
        :width 12))))

  (defun +marginalia--time-colorful (time)
    (let* ((seconds (float-time (time-subtract (current-time) time)))
           (color (doom-blend
                   (face-attribute 'marginalia-date :foreground nil t)
                   (face-attribute 'marginalia-documentation :foreground nil t)
                   (/ 1.0 (log (+ 3 (/ (+ 1 seconds) 345600.0)))))))
      ;; 1 - log(3 + 1/(days + 1)) % grey
      (propertize (marginalia--time time) 'face (list :foreground color))))

  (defun +marginalia-file-size-colorful (size)
    (let* ((size-index (/ (log10 (+ 1 size)) 7.0))
           (color (if (< size-index 10000000) ; 10m
                      (doom-blend 'orange 'green size-index)
                    (doom-blend 'red 'orange (- size-index 1)))))
      (propertize (file-size-human-readable size) 'face (list :foreground color))))

  (add-function :override (symbol-function 'marginalia--annotate-local-file)
                #'+marginalia--annotate-local-file-colorful)
)
#+end_src

** Magit
Magit is a complete text-based user interface to =Git=. Source: [[https://magit.vc][magit.vc]]

#+begin_src emacs-lisp
(use-package magit 
  :ensure t
  :defer t)
#+end_src

** Git-Timemachine
=git-timemachine= is a program that allows you to move backwards and forwards through a file’s commits.  ‘SPC g t’ will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use ‘CTRL-j’ and ‘CTRL-k’ to move backwards and forwards through the commits.

#+begin_src emacs-lisp
(use-package git-timemachine
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)
#+end_src

** Elfeed
An RSS newsfeed reader for Emacs. Move through the articles with =j/k=.  Move through the stories with =C-j/k= when in other frame.

#+begin_src emacs-lisp
(use-package elfeed
  :config
  (setq elfeed-search-feed-face ":foreground #ffffff :weight bold"
        elfeed-feeds (quote
                       (("https://www.reddit.com/r/linux.rss" reddit linux)
                        ("https://www.reddit.com/r/commandline.rss" reddit commandline)
                        ("https://www.reddit.com/r/emacs.rss" reddit emacs)
                        ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
                        ("https://hackaday.com/blog/feed/" hackaday linux)
                        ("https://opensource.com/feed" opensource linux)
                        ("https://linux.softpedia.com/backend.xml" softpedia linux)
                        ("https://itsfoss.com/feed/" itsfoss linux)
                        ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
                        ("https://www.phoronix.com/rss.php" phoronix linux)
                        ("http://feeds.feedburner.com/d0od" omgubuntu linux)
                        ("https://www.computerworld.com/index.rss" computerworld linux)
                        ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
                        ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
                        ("https://betanews.com/feed" betanews linux)
                        ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
                        ("https://distrowatch.com/news/dwd.xml" distrowatch linux)))))
 

(use-package elfeed-goodies
  :init
  (elfeed-goodies/setup)
  :config
  (setq elfeed-goodies/entry-pane-size 0.5))
#+end_src

* Plaintext
** Ansi colours
It’s nice to see ANSI colour codes displayed, however we don’t want to disrupt ANSI codes in Org src blocks. 

#+begin_src emacs-lisp
(add-hook 'text-mode-hook
  (lambda ()
    (unless (derived-mode-p 'org-mode)
      ;; Apply ANSI color codes
      (with-silent-modifications
        (ansi-color-apply-on-region (point-min) (point-max) t)))))
#+end_src

** Margin without line numbers 
Display-wise, somehow I don’t mind code buffers without any margin on the left, 
but it feels a bit off with text buffers once the padding provided by line 
numbers is stripped away. 

#+begin_src emacs-lisp
(defvar +text-mode-left-margin-width 1
  "The `left-margin-width' to be used in `text-mode' buffers.")

(defun setup-text-mode-left-margin ()
  (when (and (derived-mode-p 'text-mode)
             (not (and (bound-and-true-p visual-fill-column-mode)
                       visual-fill-column-center-text))
             (eq (current-buffer)
                 (window-buffer (frame-selected-window))))
    (setq left-margin-width (if display-line-numbers
                                0 +text-mode-left-margin-width))
    (set-window-buffer (get-buffer-window (current-buffer))
                       (current-buffer))))
#+end_src

Now we just need to hook this up to all the events which could either indicate
a change in the conditions or require the setup to be re-applied. 
#+begin_src emacs-lisp
(add-hook 'window-configuration-change-hook #'setup-text-mode-left-margin)
(add-hook 'display-line-numbers-mode-hook #'setup-text-mode-left-margin)
(add-hook 'text-mode-hook #'setup-text-mode-left-margin)
(remove-hook 'text-mode-hook #'display-line-numbers-mode)     ;; remove line numbers in text mode. 
#+end_src

* Org Mode
** Essential Packages
*** Org-toc

#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

*** Org-bullets

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

*** Org-export
We need ox-man for “Org eXporting” to manpage format and ox-gemini for exporting
to gemtext (for the gemini protocol). I also enable ox-publish for converting
an Org site into an HTML site.

#+begin_src emacs-lisp
;; Problem installing the package
;(use-package ox-man
;  :ensure t)
;(use-package ox-gemini
;  :ensure t)
;(use-package ox-publish
;  :ensure t)
#+end_src

*** Org-pandoc-import
Sometimes I’m given non-org files, that’s very sad. Luckily Pandoc offers a way to make that right again, and this package makes that even easier to do.

#+begin_src emacs-lisp
;; Problem installing the package
;(use-package org-pandoc-import
;  :ensure t
;  :after org)
#+end_src

*** Org-transclusion
There’s a really cool package to transclude Org document content.

#+begin_src emacs-lisp
(use-package org-transclusion
  :ensure t
  :after org)
#+end_src

*** Org-appear
While =org-hide-emphasis-markers= is very nice, it can sometimes make edits which 
occur at the border a bit more fiddley. We can improve this situation without
sacrificing visual amenities with the =org-appear= package. 

#+begin_src emacs-lisp
(use-package org-appear
 :ensure t
 :hook (org-mode . org-appear-mode)
 :config
 (setq org-appear-autoemphasis t
       org-appear-autosubmarkers t
       org-appear-autolinks nil)
 (run-at-time nil nil #'org-appear--set-elements))
#+end_src

*** Org-mode-visual-fill
I use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for centering the contents of the buffer horizontally to seem more like you are editing a document.

#+begin_src emacs-lisp
(defun tl/org-mode-visual-fill ()
  (setq visual-fill-column-width 130
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

;; Load and configure visual-fill-column package using use-package
(use-package visual-fill-column
  :ensure t
  :hook (org-mode . tl/org-mode-visual-fill))
#+end_src

*** Highlight-todo
Adding highlights to =TODO= and related words.

#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

** Editing Features for Org
*** File Links automation
While =org-insert-link= is all very well and good, a large portion of the time I
want to insert a file, and so it would be good to have a way to skip straight to
that and avoid the description prompt. Looking at =org-link-parameters=, we can
see that the ="file"= link type uses the completion function
=org-link-complete-file=, so let's use that to make a little file-link inserting
function.

#+begin_src emacs-lisp
(defun org-insert-file-link ()
  "Insert a file link.  At the prompt, enter the filename."
  (interactive)
  (insert (format "[[%s]]" (org-link-complete-file))))
#+end_src

*** Style formatting
This controls the color of bold, italic, underline, verbatim, strikethrough in Org mode.

#+begin_src emacs-lisp
(setq org-emphasis-alist
'(("*" (bold :slant italic :weight black ))
  ("/" (italic :foreground "dark salmon" ))
  ("_" (underline :foreground "cyan" ))
  ("=" (:foreground "PaleGreen1" ))
  ("~" (:foreground "dim gray" ))   ;; Other colors could be: snow1, PaleGreen1
  ("+" (:strike-through nil :foreground "slate blue" ))))
#+end_src

*** Style formatting automation
This automates the surround of word for style formatting with respective keys in evil visual mode.

#+begin_src emacs-lisp
(defun surround-with-bold (beg end)
  "Surround the region between BEG and END with asterisks for bold formatting."
  (interactive "r")
  (let ((region (buffer-substring-no-properties beg end)))
    (delete-region beg end)
    (insert (concat "*" region "*"))))

;; Bind the function to the "m" key in Evil visual mode
(with-eval-after-load 'evil
  (define-key evil-visual-state-map "m" 'surround-with-bold))

(defun surround-with-code (beg end)
  "Surround the region between BEG and END with asterisks for bold formatting."
  (interactive "r")
  (let ((region (buffer-substring-no-properties beg end)))
    (delete-region beg end)
    (insert (concat "=" region "="))))

;; Bind the function to the "," key in Evil visual mode
(with-eval-after-load 'evil
  (define-key evil-visual-state-map "," 'surround-with-code))

(defun surround-with-green (beg end)
  "Surround the region between BEG and END with asterisks for bold formatting."
  (interactive "r")
  (let ((region (buffer-substring-no-properties beg end)))
    (delete-region beg end)
    (insert (concat "+" region "+"))))

;; Bind the function to the "." key in Evil visual mode
(with-eval-after-load 'evil
  (define-key evil-visual-state-map "." 'surround-with-green))

(defun surround-with-underline (beg end)
  "Surround the region between BEG and END with asterisks for bold formatting."
  (interactive "r")
  (let ((region (buffer-substring-no-properties beg end)))
    (delete-region beg end)
    (insert (concat "_" region "_"))))

;; Bind the function to the "/" key in Evil visual mode
(with-eval-after-load 'evil
  (define-key evil-visual-state-map "/" 'surround-with-underline))
#+end_src

*** Source Code Block Tag Expansion
Org-tempo allows for =<s= followed by TAB to expand to a =begin_src= tag.

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

*** Org buffer creation automation
Let’s make creating an Org buffer just that little bit easier.

#+begin_src emacs-lisp
(defun create-new-org-buffer (&optional file)
  "Create a new Org mode buffer, optionally opening FILE."
  (interactive "F") ; Prompt for a file to open, if provided
  (let ((new-buffer (generate-new-buffer "*New Org Buffer*")))
    (switch-to-buffer new-buffer)
    (org-mode)
    (when file
      (insert-file-contents file))
    (setq buffer-offer-save t)))
#+end_src​

*** Zero-width spaces
Occasionally in Org you run into annoyances where you want to have two seperate blocks right together without a space. For example, to *emp​h*​asise part of a word, or put a currency symbol immediately before an inline source block. Zero width spaces are hacky but because this is Emacs, we can make this feel much less hacky by making a minor addition to the Org key map. Add filter to stop the space from being included in exports.

#+begin_src emacs-lisp
(defun org-export-remove-zero-width-space (text backend info)
  "Remove zero width spaces from TEXT."
  (unless (org-export-derived-backend-p backend 'org)
    (replace-regexp-in-string "\u200B" "" text)))

(eval-after-load 'ox
  '(add-to-list 'org-export-filter-final-output-functions #'org-export-remove-zero-width-space t))
#+end_src

** Org Configuraion
*** Org Font Faces

#+begin_src emacs-lisp
(defun tl/org-font-setup ()
  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.25)
                  (org-level-2 . 1.15)
                  (org-level-3 . 1.12)
                  (org-level-4 . 1.09)
                  (org-level-5 . 1.06)
                  (org-level-6 . 1.03)
                  (org-level-7 . 1.0)
                  (org-level-8 . 1.0)))
    (set-face-attribute (car face) nil :font "Jetbrains Mono Nerd Font" :weight 'normal :height (cdr face)))

  ;; Fixed-pitch settings
  (dolist (face '(org-block org-table org-formula org-code
                  org-verbatim org-special-keyword org-meta-line
                  org-checkbox line-number line-number-current-line))
    (set-face-attribute face nil :inherit '(shadow fixed-pitch))))

;; Call efs/org-font-setup when entering org-mode
(add-hook 'org-mode-hook #'tl/org-font-setup)

;; Increase title size
(custom-set-faces
  '(org-document-title ((t (:height 1.2)))))

;; Make quote blocks italic style format
(setq org-fontify-quote-and-verse-blocks t)
#+end_src

*** Org Basic Config

#+begin_src emacs-lisp
(setq org-directory "~/documents/org/agenda"
      org-default-notes-file (expand-file-name "inbox.org" org-directory)
      org-ellipsis " ▼ "                           ; Elipsis character for folding headings
      org-log-done 'time                           ; Having the time a item is done sounds
      org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+") ("1." . "a."))   ; List of bullets that cahnge with depth
      org-hide-emphasis-markers t
      ;; ex. of org-link-abbrev-alist in action
      ;; [[arch-wiki:Name_of_Page][Description]]
      org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
        '(("google" . "http://www.google.com/search?q=")
          ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
          ("ddg" . "https://duckduckgo.com/?q=")
          ("wiki" . "https://en.wikipedia.org/wiki/"))
      org-table-convert-region-max-lines 20000
      org-auto-align-tags nil
      org-tags-column 0
      org-special-ctrl-a/e t
      org-insert-heading-respect-content t
      org-export-with-sub-superscripts '{}         ; Don't treat lone _ / ^ as sub/superscripts, require _{} / ^{}
      org-export-allow-bind-keywords t             ; Bind keywords can be handy
      org-use-property-inheritance t               ; It's convenient to have properties inherited
      org-catch-invisible-edits 'smart             ; Try not to accidently do weird stuff in invisible regions
      org-image-actual-width '(0.9)                ; Make the in-buffer display closer to the exported result
      org-pretty-entities t
      org-todo-keywords
        '((sequence
           "TODO(t)"
           "DOING(d)"
           "NEXT(n)"
           "|"                 ; The pipe necessary to separate "active" states and "inactive" states
           "DONE(D)")
          (sequence
           "WAIT(w)"
           "SOMEDAY(s)"
           "|"
           "CANC(c)")))

;; Org-journal (using org-roam-dailies)
(setq org-journal-dir "~/documents/org/agenda"
      org-journal-date-prefix "* "
      org-journal-time-prefix "** "
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org")

;; Org symbols/priorities
(setq org-hide-leading-stars t
      org-priority-highest ?A
      org-priority-lowest ?C
      org-priority-faces
      '((?A . 'all-the-icons-red)
        (?B . 'all-the-icons-orange)
        (?C . 'all-the-icons-yellow)))

(setq org-refile-targets
  '(("archive.org" :maxlevel . 1)
    ("inbox.org" :maxlevel . 1)))

;; Save Org buffers after refiling
(advice-add 'org-refile :after 'org-save-all-org-buffers)

(setq org-tag-alist
  '((:startgroup)
     ; Put mutually exclusive tags here
     (:endgroup)
     ("Important" . ?i)
     ("Assignment" . ?a)
     ("Issue" . ?I)
     ("Emacs" . ?e)
     ("Project" . ?p)
     ("Research" . ?P)
     ("Batch" . ?b)
     ("Read" . ?r)
     ("Chore" . ?c)
     ("Routine" . ?R)
     ("Daily" . ?d)
     ("Work" . ?w)
     ("Trivial" . ?t)))
#+end_src

*** Org-modern
Fontifying org-mode buffers to be as pretty as possible is of paramount importance, 
and Minad’s lovely =org-modern= goes a long way in this regard.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'org-modern-mode)
(add-hook 'org-agenda-finalize-hook #'org-modern-agenda)

(use-package org-modern
  :ensure t
  :hook (org-mode . org-modern-mode)
  :config
  (setq org-modern-star '("◉" "○" "◆" "●" "○" "◆" "●")
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.2
        org-modern-list '((45 . "➤")
                          (43 . "•")
                          (42 . "-"))
        org-modern-todo-faces
        '(("TODO" :inverse-video t :inherit org-todo)
          ("PROJ" :inverse-video t :inherit +org-todo-project)
          ("[-]"  :inverse-video t :inherit +org-todo-active)
          ("NEXT" :inverse-video t :inherit +org-todo-active)
          ("DONE" :inverse-video t :inherit +org-todo-cancel)
          ("WAIT" :inverse-video t :inherit +org-todo-onhold)
          ("[?]"  :inverse-video t :inherit +org-todo-onhold))
        org-modern-footnote
        (cons nil (cadr org-script-display))
        org-modern-block-fringe nil
        org-modern-block-name
        '((t . t)
          ("src" "»" "«")
          ("example" "»–" "–«")
          ("quote" "❝" "❞")
          ("export" "⏩" "⏪"))
        org-modern-progress nil
        org-modern-priority nil
        org-modern-horizontal-rule (make-string 36 ?─)
        org-modern-keyword
        '((t . t)
          ("title" . "𝙏")
          ("subtitle" . "𝙩")
          ("author" . "𝘼")
          ("email" . #("" 0 1 (display (raise -0.14))))
          ("date" . "𝘿")
          ("property" . "☸")
          ("options" . "⌥")
          ("startup" . "⏻")
          ("macro" . "𝓜")
          ("bind" . #("" 0 1 (display (raise -0.1))))
          ("bibliography" . "")
          ("print_bibliography" . #("" 0 1 (display (raise -0.1))))
          ("cite_export" . "⮭")
          ("print_glossary" . #("ᴬᶻ" 0 1 (display (raise -0.1))))
          ("glossary_sources" . #("" 0 1 (display (raise -0.14))))
          ("include" . "⇤")
          ("setupfile" . "⇚")
          ("html_head" . "🅷")
          ("html" . "🅗")
          ("latex_class" . "🄻")
          ("latex_class_options" . #("🄻" 1 2 (display (raise -0.14))))
          ("latex_header" . "🅻")
          ("latex_header_extra" . "🅻⁺")
          ("latex" . "🅛")
          ("beamer_theme" . "🄱")
          ("beamer_color_theme" . #("🄱" 1 2 (display (raise -0.12))))
          ("beamer_font_theme" . "🄱𝐀")
          ("beamer_header" . "🅱")
          ("beamer" . "🅑")
          ("attr_latex" . "🄛")
          ("attr_html" . "🄗")
          ("attr_org" . "⒪")
          ("call" . #("" 0 1 (display (raise -0.15))))
          ("name" . "⁍")
          ("header" . "›")
          ("caption" . "☰")
          ("results" . "🠶"))))
#+end_src

*** Org-super-agenda

#+begin_src emacs-lisp
(use-package org-super-agenda
  :ensure t
  :after org
  :config
  (org-super-agenda-mode))

(setq org-agenda-files
      (file-expand-wildcards "~/documents/org/agenda/*.org"))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-tags-column 100
      org-deadline-warning-days 30
      org-return-follows-link t
      org-use-speed-commands t
      org-agenda-compact-blocks t)

;; It seems reasonable to have deadlines in the error face when they’re passed.
(setq org-agenda-deadline-faces
      '((1.001 . error)
        (1.0 . org-warning)
        (0.5 . org-upcoming-deadline)
        (0.0 . org-upcoming-distant-deadline)))

(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :todo "TODAY"
                          :scheduled today
                          :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Doing now"
                           :todo "DOING"
                           :order 2)
                          (:name "Next to do"
                           :todo "NEXT"
                           :order 3)
                          (:name "Work"
                           :tag "Work"
                           :order 4)
                          (:name "Important"
                           :tag "Important"
                           :priority "A"
                           :order 6)
                          (:name "Due Today"
                           :deadline today
                           :order 1)
                          (:name "Due Soon"
                           :deadline future
                           :order 8)
                          (:name "Overdue"
                           :deadline past
                           :face error
                           :order 7)
                          (:name "Assignments"
                           :tag "Assignment"
                           :order 10)
                          (:name "Issues"
                           :tag "Issue"
                           :order 12)
                          (:name "Emacs"
                           :tag "Emacs"
                           :order 13)
                          (:name "Projects"
                           :tag "Project"
                           :order 14)
                          (:name "Research"
                           :tag "Research"
                           :order 15)
                          (:name "To read"
                           :tag "Read"
                           :order 30)
                          (:name "To watch"
                           :tag "Watch"
                           :order 31)
                          (:name "Waiting"
                           :todo "WAITING"
                           :order 20)
                          (:name "University"
                           :tag "uni"
                           :order 32)
                          (:name "Trivial"
                           :priority<= "C"
                           :tag ("Trivial" "Unimportant")
                           :todo ("SOMEDAY" )
                           :order 90)
                          (:discard (:tag ("Chore" "Routine" "Daily")))))))))))

(add-to-list 'org-agenda-custom-commands
             '("d" "Doing now"
               (
                (todo "DOING"
                      ((org-agenda-overriding-header "Doing now")
                       (org-agenda-files org-agenda-files))))))

(add-to-list 'org-agenda-custom-commands
             '("n" "Next Tasks"
               (
                (todo "NEXT"
                      ((org-agenda-overriding-header "Next Tasks")
                       (org-agenda-files org-agenda-files))))))

(add-to-list 'org-agenda-custom-commands
             '("e" "Low Effort Tasks"
               tags-todo "+TODO=\"NEXT\"|+TODO=\"DOING\"+Effort<15&+Effort>0"
               (
                (org-agenda-overriding-header "Low Effort Tasks")
                (org-agenda-max-todos 20)
                (org-agenda-files org-agenda-files))))

(add-to-list 'org-agenda-custom-commands
             '("w" "Workflow Status"
               (
                (todo "WAIT"
                      ((org-agenda-overriding-header "Waiting on External")
                       (org-agenda-files org-agenda-files)))
                (todo "REVIEW"
                      ((org-agenda-overriding-header "In Review")
                       (org-agenda-files org-agenda-files)))
                (todo "PLAN"
                      ((org-agenda-overriding-header "In Planning")
                       (org-agenda-todo-list-sublevels nil)
                       (org-agenda-files org-agenda-files)))
                (todo "BACKLOG"
                      ((org-agenda-overriding-header "Project Backlog")
                       (org-agenda-todo-list-sublevels nil)
                       (org-agenda-files org-agenda-files)))
                (todo "READY"
                      ((org-agenda-overriding-header "Ready for Work")
                       (org-agenda-files org-agenda-files)))
                (todo "DOING"
                      ((org-agenda-overriding-header "Active Projects")
                       (org-agenda-files org-agenda-files)))
                (todo "DONE"
                      ((org-agenda-overriding-header "Completed Projects")
                       (org-agenda-files org-agenda-files)))
                (todo "CANC"
                      ((org-agenda-overriding-header "Cancelled Projects")
                       (org-agenda-files org-agenda-files)))
                )))
#+end_src

*** Custom keys for org-agenda
- =d=: Mark the current task as doing.
- =x=: Mark the current task as done.
- =X=: Mark the current task as done and create a new task at the same level, taking advantage of the task template I’d previously created in =org-capture-templates=.
- =N=: Create a new note or task at the current position.

Make it easy to mark a task as doing
#+begin_src emacs-lisp
;; Load Org mode
(require 'org)

(defun tl/org-agenda-doing (&optional arg)
  "Mark current TODO as doing.
This changes the line at point, all other lines in the agenda referring to
the same tree node, and the headline of the tree node in the Org-mode file."
  (interactive "P")
  (org-agenda-todo "DOING"))
#+end_src

Make it easy to mark a task as done
#+begin_src emacs-lisp
(defun tl/org-agenda-done (&optional arg)
  (interactive "P")
  (org-agenda-todo "DONE"))
#+end_src

Make it easy to mark a task as done and create a follow-up task
#+begin_src emacs-lisp
  (defun tl/org-agenda-mark-done-and-add-followup ()
    "Mark the current TODO as done and add another task after it.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
    (interactive)
    (org-agenda-todo "DONE")
    (org-agenda-switch-to)
    (org-capture 0 "t"))
#+end_src

Capture something based on the agenda position
#+begin_src emacs-lisp
(defun tl/org-agenda-new ()
  "Create a new note or task at the current agenda item.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
  (interactive)
  (org-agenda-switch-to)
  (org-capture 0))
#+end_src

*** Org-capture

#+begin_src emacs-lisp
(setq org-capture-templates
  `(("t" "Todo" entry (file+olp "~/documents/org/agenda/inbox.org")
         "* TODO %?\n  %U\n  %i" :empty-lines 1)

    ("m" "Meeting" entry (file+olp+datetree "~/documents/org/agenda/inbox.org")
         "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
         :clock-in :clock-resume
         :empty-lines 1)

    ("w" "Workflow" entry (file+olp+datetree "~/documents/org/agenda/inbox.org")
         "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)))
#+end_src

*** Org-roam

#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory "~/documents/org/roam/seed-notes")
  (org-roam-dailies-directory "~/documents/org/roam/journal")
  (org-roam-completion-everywhere t)
  (org-roam-graph-viewer "/usr/bin/waterfox-g")
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-setup))

;; Org-roam templates
(setq org-roam-capture-templates
 '(("d" "default" plain "%?"
    :if-new (file+head "${slug}.org" "#+title: ${title}\n#+date: %U\n")
    :unnarrowed t)
   ("n" "note" plain
    (file "~/documents/org/roam/templates/note.org")
    :if-new (file+head "${slug}.org" "#+title: ${title}\n#+date: %U\n")
    :unnarrowed t)
   ("b" "book note" plain
    (file "~/documents/org/roam/templates/book.org")
    :if-new (file+head "${slug}.org" "#+title: ${title}\n#+date: %U\n")
    :unnarrowed t)
   ("t" "table of contents" plain
    (file "~/documents/org/roam/templates/toc.org")
    :if-new (file+head "${slug}.org" "#+title: ${title}\n#+date: %U\n")
    :unnarrowed t)))

;; Org-roam dailies capture templates
(setq org-roam-dailies-capture-templates
      '(("d" "default" entry "* %<%I:%M %p>: %?"
         :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
#+end_src

*** Org-roam-ui
 Org-roam is nice by itself, but there are so extra nice packages which integrate with it.

 #+begin_src emacs-lisp
(use-package websocket
  :after org-roam)

(use-package org-roam-ui
  :after org-roam
  :commands org-roam-ui-open
  :hook (org-roam . org-roam-ui-mode)
  :config
  (require 'org-roam) ; in case autoloaded
  (defun org-roam-ui-open ()
    "Ensure the server is active, then open the roam graph."
    (interactive)
    (unless org-roam-ui-mode (org-roam-ui-mode 1))
    (browse-url-xdg-open (format "http://localhost:%d" org-roam-ui-port))))
 #+end_src
