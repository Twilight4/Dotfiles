#+TITLE: GNU Emacs Config
#+AUTHOR: Twilight4
#+DESCRIPTION: Personal Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#programs-to-load-first][Programs to load first]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#evil-mode][Evil Mode]]
  - [[#global-keybindings][Global Keybindings]]
  - [[#general-keybindings][General Keybindings]]
- [[#ui-configuration][UI Configuration]]
  - [[#better-defaults][Better Defaults]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#color-theme][Color Theme]]
  - [[#doom-modeline-and-all-the-icons][Doom-Modeline and All-the-icons]]
  - [[#which-key][Which-key]]
  - [[#dashboard][Dashboard]]
  - [[#transparency][Transparency]]
  - [[#centaur-tabs][Centaur-Tabs]]
- [[#editing-features][Editing Features]]
  - [[#hungry-delete][Hungry Delete]]
  - [[#buffer-move][Buffer-move]]
  - [[#global-auto-revert][Global Auto Revert]]
- [[#other-packages][Other Packages]]
  - [[#neotree][Neotree]]
  - [[#dired][Dired]]
  - [[#ivy-counsel][IVY (Counsel)]]
  - [[#magit][Magit]]
- [[#org-mode][Org Mode]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#enabling-org-agenda][Enabling Org Agenda]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]

* Programs to load first
** Elpaca Package Manager

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.5)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)
#+end_src

** Evil Mode

#+begin_src emacs-lisp
;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
    :init      ;; Tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  (use-package evil-tutor)
#+end_src

** Global Keybindings

#+begin_src emacs-lisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; This code sets up an empty keymap for C-x prefix effectively removing all default keybindings under the C-x prefix
;; If you still want to use some of the keybindings prefixed by C-x, you will need to manually rebind them using the 'general' package
(define-key global-map (kbd "C-x") (make-sparse-keymap))
(define-key global-map (kbd "C-x C-n") (make-sparse-keymap))
(define-key global-map (kbd "C-x n") (make-sparse-keymap))
(global-unset-key (kbd "C-x n"))
(global-unset-key (kbd "C-x C-n"))

;; Custom keybindings without leader key
;; Buffer previous/next
(global-set-key (kbd "M-n") 'next-buffer)
(global-set-key (kbd "M-p") 'previous-buffer)
;; Window motions
(global-set-key (kbd "C-h") 'evil-window-left)
(global-set-key (kbd "C-j") 'evil-window-down)
(global-set-key (kbd "C-k") 'evil-window-up)
(global-set-key (kbd "C-l") 'evil-window-right)
;; Zoom In/Out
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
;; Hungry-delete
(global-set-key (kbd "<backspace>") 'hungry-delete-backward)
(global-set-key (kbd "<delete>") 'hungry-delete-forward)
#+end_src

** General Keybindings

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

;; Set up 'C-x' as the global leader key
(general-define-key
 :prefix "C-x"
 :states '(normal insert visual emacs)
 "" nil ; Remove default C-x keymap prefix
 ;; Common keybindings
 "C-s" '(save-buffer :wk "Save buffer")
 "c" '(counsel-recentf :wk "Find recent files")
 "C-n" '(neotree-toggle :wk "Toggle neotree")
 "C-c" (lambda () (interactive) (find-file "~/.config/emacs/config.org"))
 "C-r" (lambda () (interactive) (load-file "~/.config/emacs/init.el")))

(which-key-add-key-based-replacements "C-x C-c" "Edit Config"
                                      "C-x C-r" "Reload Emacs")

;; Set up 'C-z' as another global leader key
(general-define-key
 :prefix "C-z"
 :states '(normal insert visual emacs)
 "" nil ; Remove default C-z keymap prefix
 ;; Org Mode
 "C-a" '(org-agenda :wk "Org agenda")
 "C-i" '(org-toggle-item :wk "Org toggle item")
 "C-o" '(org-todo :wk "Org todo")
 "C-b" '(org-babel-tangle :wk "Org babel tangle")
 "o" '(org-todo-list :wk "Org todo list")
 "-" '(org-table-insert-hline :wk "Insert hline in table")
 "t" '(org-time-stamp :wk "Org time stamp")
 ;; Window splits
 "C-c" '(evil-window-delete :wk "Close window")
 "C-n" '(evil-window-new :wk "New window")
 "C-s" '(evil-window-split :wk "Horizontal split window")
 "C-v" '(evil-window-vsplit :wk "Vertical split window")
 ;; Move Windows
 "C-h" '(buf-move-left :wk "Buffer move left")
 "C-j" '(buf-move-down :wk "Buffer move down")
 "C-k" '(buf-move-up :wk "Buffer move up")
 "C-l" '(buf-move-right :wk "Buffer move right"))

;; Set up 'SPC' as another global leader key
(general-create-definer tl/leader-keys
  :states '(normal insert visual emacs)
  :keymaps 'override
  :prefix "SPC" ;; Set leader
  :global-prefix "M-SPC") ;; Access leader in insert mode

  (tl/leader-keys
    "." '(find-file :wk "Find file")
    "TAB" '(comment-line :wk "Comment lines"))

  (tl/leader-keys
    "b" '(:ignore t :wk "Buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b r" '(revert-buffer :wk "Reload buffer"))

  (tl/leader-keys
    "h" '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable"))

  (tl/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines"))

  (tl/leader-keys
    "o" '(:ignore t :wk "Org")
    "o e" '(org-export-dispatch :wk "Org export dispatch"))

  (tl/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d ." '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired"))
)
#+end_src

* UI Configuration
** Better Defaults

#+begin_src emacs-lisp
(menu-bar-mode -1)                                ; Disable menubar
(tool-bar-mode -1)                                ; Disable tool bar
(scroll-bar-mode -1)                              ; Disable scroll bar
(tooltip-mode -1)                                 ; Disable tooltips
(global-display-line-numbers-mode 1)              ; Display line numbers
(global-visual-line-mode t)                       ; Display truncated lines
(fringe-mode -1)                                  ; Disable the narrow areas on the sides of the emacs window

(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; Take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
 evil-want-fine-undo t                            ; By default while in insert all changes are one big blob. Be more granular
 auto-save-default nil                            ; I like to lose work, I certainly do
 truncate-string-elipsis "â€¦"                      ; Unicode ellispis are nicer than "...", and also save /precious/ space
 scroll-margin 2                                  ; It's nice to maintain a little margin
 display-time-default-load-average nil            ; I don't think I've ever found this useful
 use-dialog-box nil                               ; This setting disables the display of dialog boxes, such as confirmation or warning pop-ups
 use-file-dialog nil                              ; This setting disables the use of file selection dialogs, instead emacs will rely on command-line or programmatic methods for file operations
 make-backup-files nil)                           ; Don't create backup files to avoid clutterinf the file system with redundant backup copies
    
(display-time-mode 1)                             ; Enable time in the mode-line
(global-subword-mode 1)                           ; Iterate through CamelCase words
(defalias 'yes-or-no-p 'y-or-n-p)                 ; Use 'y' or 'n' instead of 'yes' or 'no'

(unless (string-match-p "^Power N/A" (battery))   ; On laptops...
  (display-battery-mode 1))                       ; it's nice to know how much power you have

;; Setting up default locales
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+end_src

** Setting the Font Face

#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "JetBrains Mono Nerd Font"
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu Nerd Font"
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono Nerd Font"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono Nerd Font-12"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src

** Color Theme
Taking a look at the [[https://github.com/doomemacs/themes/tree/screenshots][screenshots]] might help you decide which one you like best. You can run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-vibrant t))
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t)   ; if nil, italics is universally disabled
#+end_src

** Doom-Modeline and All-the-icons
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs. 
*NOTE*: The first time you load your configuration on a new machine, you'll need to run =M-x all-the-icons-install-fonts= so that mode line icons display correctly.

#+begin_src emacs-lisp
(use-package all-the-icons)
  :ensure t
  :if (display-graphic-p)

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

** Which-key

#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.5
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " â†’ " ))
#+end_src

** Dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "~/.config/emacs/assets/dashboard.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (registers . 3)))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** Transparency
It's always better to set transparency in optiosn for respective applications that supports it rather than setting it in window manager. I use transparency in Hyprland but not in River.

#+begin_src emacs-lisp
;(add-to-list 'default-frame-alist '(alpha-background . 90)) ; For all new frames henceforth
#+end_src

** Centaur-Tabs
Centaur Tabs is an Emacs package that enhances the tab bar functionality, providing a more visually appealing way to manage multiple open buffers. Source: [[https://github.com/ema2159/centaur-tabs][centaur-tabs]]

#+begin_src emacs-lisp
(use-package centaur-tabs
  :if window-system
  :demand
  :init
  ;; Set the style to rounded with icons
  (setq centaur-tabs-style "bar")
  (setq centaur-tabs-set-icons t)

  :config
  ;; Enable centaur-tabs
  (centaur-tabs-mode t))
#+end_src

* Editing Features
** Hungry Delete
Hungry Delete is a minor-mode that causes deletion to delete all whitespace in the direction you are deleting. Source: [[https://github.com/nflath/hungry-delete][hungry-delete]]

#+begin_src emacs-lisp
(use-package hungry-delete
  :ensure t
  :defer t
  :config (global-hungry-delete-mode))
#+end_src

** Buffer-move
Creating some functions to allow easily moving windows around. Source: [[https://www.emacswiki.org/emacs/buffer-move.el][EmacsWiki]]

#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

** Global Auto Revert
Keep buffers synced and up to date with auto revert mode.

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
#+end_src

* Other Packages
** Neotree
A Emacs tree plugin like NerdTree for Vim.

#+begin_src emacs-lisp
(use-package neotree
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 25
        neo-theme (if (display-graphic-p) 'icons 'arrow)
        neo-window-fixed-size nil
        inhibit-compacting-font-caches t)
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil)))))
#+end_src

** Dired
Dired (short for "directory editor") is a built-in file management mode in Emacs.

#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "nsxiv")
                                ("jpg" . "nsxiv")
                                ("png" . "nsxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))
#+end_src

** IVY (Counsel)
- Ivy, a generic completion mechanism for Emacs.
- Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
- Ivy-rich allows us to add descriptions alongside the commands in =M-x=.

#+begin_src emacs-lisp
 (use-package counsel
  :after ivy
  :config (counsel-mode))

(use-package ivy
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer)) 
#+end_src

** Magit
Magit is a complete text-based user interface to =Git=. Source: [[https://magit.vc][magit.vc]]

#+begin_src emacs-lisp
(use-package magit 
  :ensure t
  :defer t)
#+end_src

* Org Mode
** Enabling Table of Contents

#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Enabling Org Agenda

#+begin_src emacs-lisp
(setq org-agenda-files (append
                        (file-expand-wildcards "~/documents/org/*.org")))
#+end_src

** Disable Electric Indent
Electric indent mode makes Org mode source blocks have some really weird and annoying default indentation behavior.

#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

** Source Code Block Tag Expansion
Org-tempo allows for =<s= followed by TAB to expand to a =begin_src= tag.

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src
