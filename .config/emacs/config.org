#+TITLE: GNU Emacs Config
#+AUTHOR: Twilight4
#+DESCRIPTION: Personal Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#programs-to-load-first][Programs to load first]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#evil-mode][Evil Mode]]
  - [[#global-keybindings][Global Keybindings]]
  - [[#general-keybindings][General Keybindings]]
- [[#fonts][Fonts]]
  - [[#setting-the-font-face][Setting the Font Face]]
- [[#ui-configuration][UI Configuration]]
  - [[#better-defaults][Better defaults]]
  - [[#color-theme][Color Theme]]
  - [[#better-modeline][Better Modeline]]
  - [[#which-key][Which-Key]]
- [[#ivy-counsel][IVY (Counsel)]]
- [[#org-mode][Org Mode]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]

* Programs to load first
** Elpaca Package Manager

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.5)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (call-process "git" nil buffer t "clone"
                                         (plist-get order :repo) repo)))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src

** Evil Mode

#+begin_src emacs-lisp
;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
    :init      ;; Tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  (use-package evil-tutor)
#+end_src

** Global Keybindings

#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; This code sets up an empty keymap for C-x prefix effectively removing all default keybindings under the C-x prefix
  ;; If you still want to use some of the keybindings prefixed by C-x, you will need to manually rebind them using the 'general' package
  (define-key global-map (kbd "C-x") (make-sparse-keymap))
  (define-key global-map (kbd "C-x C-n") (make-sparse-keymap))
  (define-key global-map (kbd "C-x n") (make-sparse-keymap))
  (global-unset-key (kbd "C-x n"))
  (global-unset-key (kbd "C-x C-n"))

  ;; Custom keybindings without leader key
  ;; Buffers
  (global-set-key (kbd "M-n") 'next-buffer)
  (global-set-key (kbd "M-p") 'previous-buffer)
  ;; Zoom In/Out
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
  
  ;; You can also disable default C-x keybindings individually
  ;;(global-unset-key (kbd "C-x ESC"))
  ;;(global-unset-key (kbd "C-x TAB"))
  ;;(global-unset-key (kbd "C-x DEL"))
  ;;(global-unset-key (kbd "C-x SPC"))
  ;;(global-unset-key (kbd "C-x RET"))
  ;;(global-unset-key (kbd "C-x $"))
  ;;(global-unset-key (kbd "C-x '"))
  ;;(global-unset-key (kbd "C-x ("))
  ;;(global-unset-key (kbd "C-x )"))
  ;;(global-unset-key (kbd "C-x *"))
  ;;(global-unset-key (kbd "C-x +"))
  ;;(global-unset-key (kbd "C-x -"))
  ;;(global-unset-key (kbd "C-x ."))
  ;;(global-unset-key (kbd "C-x 0"))
  ;;(global-unset-key (kbd "C-x 1"))
  ;;(global-unset-key (kbd "C-x 2"))
  ;;(global-unset-key (kbd "C-x 3"))
  ;;(global-unset-key (kbd "C-x 4"))
  ;;(global-unset-key (kbd "C-x 5"))
  ;;(global-unset-key (kbd "C-x 6"))
  ;;(global-unset-key (kbd "C-x 8"))
  ;;(global-unset-key (kbd "C-x ;"))
  ;;(global-unset-key (kbd "C-x <"))
  ;;(global-unset-key (kbd "C-x ="))
  ;;(global-unset-key (kbd "C-x >"))
  ;;(global-unset-key (kbd "C-x ["))
  ;;(global-unset-key (kbd "C-x ]"))
  ;;(global-unset-key (kbd "C-x ^"))
  ;;(global-unset-key (kbd "C-x `"))
  ;;(global-unset-key (kbd "C-x a"))
  ;;(global-unset-key (kbd "C-x d"))
  ;;(global-unset-key (kbd "C-x e"))
  ;;(global-unset-key (kbd "C-x f"))
  ;;(global-unset-key (kbd "C-x h"))
  ;;(global-unset-key (kbd "C-x i"))
  ;;(global-unset-key (kbd "C-x k"))
  ;;(global-unset-key (kbd "C-x l"))
  ;;(global-unset-key (kbd "C-x o"))
  ;;(global-unset-key (kbd "C-x p"))
  ;;(global-unset-key (kbd "C-x q"))
  ;;(global-unset-key (kbd "C-x f"))
  ;;(global-unset-key (kbd "C-x b"))
  ;;(global-unset-key (kbd "C-x m"))
  ;;(global-unset-key (kbd "C-x z"))
  ;;(global-unset-key (kbd "C-x r"))
  ;;(global-unset-key (kbd "C-x s"))
  ;;(global-unset-key (kbd "C-x t"))
  ;;(global-unset-key (kbd "C-x u"))
  ;;(global-unset-key (kbd "C-x v"))
  ;;(global-unset-key (kbd "C-x w"))
  ;;(global-unset-key (kbd "C-x x"))
  ;;(global-unset-key (kbd "C-x \\"))
  ;;(global-unset-key (kbd "C-x {"))
  ;;(global-unset-key (kbd "C-x }"))
  ;;(global-unset-key (kbd "C-x C-SPC"))
  ;;(global-unset-key (kbd "C-x C-+"))
  ;;(global-unset-key (kbd "C-x C--"))
  ;;(global-unset-key (kbd "C-x C-0"))
  ;;(global-unset-key (kbd "C-x C-;"))
  ;;(global-unset-key (kbd "C-x C-="))
  ;;(global-unset-key (kbd "C-x C-@"))
  ;;(global-unset-key (kbd "C-x C-b"))
  ;;(global-unset-key (kbd "C-x C-c"))
  ;;(global-unset-key (kbd "C-x C-j"))
  ;;(global-unset-key (kbd "C-x C-k"))
  ;;(global-unset-key (kbd "C-x C-l"))
  ;;(global-unset-key (kbd "C-x C-f"))
  ;;(global-unset-key (kbd "C-x C-o"))
  ;;(global-unset-key (kbd "C-x C-s"))
  ;;(global-unset-key (kbd "C-x C-p"))
  ;;(global-unset-key (kbd "C-x C-q"))
  ;;(global-unset-key (kbd "C-x C-r"))
  ;;(global-unset-key (kbd "C-x C-d"))
  ;;(global-unset-key (kbd "C-x C-t"))
  ;;(global-unset-key (kbd "C-x C-u"))
  ;;(global-unset-key (kbd "C-x C-v"))
  ;;(global-unset-key (kbd "C-x C-w"))
  ;;(global-unset-key (kbd "C-x C-x"))
  ;;(global-unset-key (kbd "C-x C-z"))
  ;;(global-unset-key (kbd "C-x C-e"))
  ;;(global-unset-key (kbd "C-x C-<right>"))
  ;;(global-unset-key (kbd "C-x C-<left>"))
  ;;(global-unset-key (kbd "C-x <right>"))
  ;;(global-unset-key (kbd "C-x <left>"))
#+end_src

** General Keybindings

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)

  ;; Set up 'C-x' as the global leader key
  (general-define-key
   :prefix "C-x"
   :states '(normal insert visual emacs)
   "" nil ; Remove default C-x keymap prefix
   "C-h" '(describe-function :wk "Describe function")
   "C-s" '(save-buffer :wk "Save buffer")
   "C-c" (lambda () (interactive) (find-file "~/.config/emacs/config.org"))
   "C-r" (lambda () (interactive) (load-file "~/.config/emacs/init.el")))

  (which-key-add-key-based-replacements "C-x C-c" "Edit Config"
                                        "C-x C-r" "Reload Emacs")

  ;; Set up 'SPC' as the global leader key
  (general-create-definer tl/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; Set leader
    :global-prefix "M-SPC") ;; Access leader in insert mode

    (tl/leader-keys
      "." '(find-file :wk "Find file")
      "TAB" '(comment-line :wk "Comment lines"))

    (tl/leader-keys
      "b" '(:ignore t :wk "Buffer")
      "b b" '(switch-to-buffer :wk "Switch buffer")
      "b i" '(ibuffer :wk "Ibuffer")
      "b k" '(kill-this-buffer :wk "Kill this buffer")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Reload buffer"))

    (tl/leader-keys
      "h" '(:ignote t :wk "Help")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe variable"))

    (tl/leader-keys
      "t" '(:ignote t :wk "Toggle")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t t" '(visual-line-mode :wk "Toggle truncated lines"))
  )
#+end_src

* Fonts
** Setting the Font Face

#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "JetBrains Mono Nerd Font"
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu Nerd Font"
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono Nerd Font"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono Nerd Font-11"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src

* UI Configuration
** Better defaults

#+begin_src emacs-lisp
(menu-bar-mode -1)                                ; Disable menubar
(tool-bar-mode -1)                                ; Disable tool bar
(scroll-bar-mode -1)                              ; Disable scroll bar
(tooltip-mode -1)                                 ; Disable tooltips
(global-display-line-numbers-mode 1)              ; Display line numbers
(global-visual-line-mode t)                       ; Display truncated lines

(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
 evil-want-fine-undo t                            ; By default while in insert all changes are one big blob. Be more granular
 auto-save-default t                              ; Nobody likes to loose work, I certainly don't
 truncate-string-elipsis "…"                      ; Unicode ellispis are nicer than "...", and also save /precious/ space
 scroll-margin 2                                  ; It's nice to maintain a little margin
 display-time-default-load-average nil)           ; I don't think I've ever found this useful

(display-time-mode 1)                             ; Enable time in the mode-line

(unless (string-match-p "^Power N/A" (battery))   ; On laptops...
  (display-battery-mode 1))                       ; it's nice to know how much power you have

(global-subword-mode 1)                           ; Iterate through CamelCase words
#+end_src

** Color Theme
Taking a look at the [[https://github.com/doomemacs/themes/tree/screenshots][screenshots]] might help you decide which one you like best. You can run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-vibrant t))
#+end_src

** Better Modeline
*NOTE*: The first time you load your configuration on a new machine, you'll need to run =M-x all-the-icons-install-fonts= so that mode line icons display correctly.

#+begin_src emacs-lisp
(use-package all-the-icons)
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

** Which-Key

#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.5
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " → " ))
#+end_src

* IVY (Counsel)
- Ivy, a generic completion mechanism for Emacs.
- Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
- Ivy-rich allows us to add descriptions alongside the commands in =M-x=.

#+begin_src emacs-lisp
 (use-package counsel
  :after ivy
  :config (counsel-mode))

(use-package ivy
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer)) 
#+end_src

* Org Mode
** Enabling Table of Contents

#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Electric Indent
Org mode source blocks have some really weird and annoying default indentation behavior.

#+begin_src emacs-lisp
(electric-indent-mode -1)
#+end_src

** Source Code Block Tag Expansion
Org-tempo allows for =<s= followed by TAB to expand to a =begin_src= tag.

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src
